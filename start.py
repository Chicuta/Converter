#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Conversor de Arquivos Multim√≠dia
Verifica depend√™ncias e inicia o servidor
"""

import sys
import subprocess
import os
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_ffmpeg():
    """Verifica se o FFmpeg est√° instalado"""
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ FFmpeg detectado")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå FFmpeg n√£o encontrado")
        print("Instale o FFmpeg:")
        print("- Windows: winget install Gyan.FFmpeg")
        print("- Ubuntu/Debian: sudo apt install ffmpeg")
        print("- macOS: brew install ffmpeg")
        return False

def check_virtual_environment():
    """Verifica se est√° em um ambiente virtual"""
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Ambiente virtual detectado")
        return True
    else:
        print("‚ö†Ô∏è  N√£o est√° em um ambiente virtual")
        print("Recomenda-se usar um ambiente virtual:")
        print("python -m venv .venv")
        print(".venv\\Scripts\\activate  # Windows")
        print("source .venv/bin/activate  # Linux/macOS")
        return False

def install_dependencies():
    """Instala as depend√™ncias do requirements.txt"""
    requirements_file = Path("requirements.txt")
    if not requirements_file.exists():
        print("‚ùå Arquivo requirements.txt n√£o encontrado")
        return False
    
    try:
        print("üì¶ Instalando depend√™ncias...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['uploads', 'outputs']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    print("‚úÖ Diret√≥rios criados")

def start_server():
    """Inicia o servidor da aplica√ß√£o"""
    try:
        print("üöÄ Iniciando servidor...")
        print("üì° Servidor dispon√≠vel em: http://localhost:8000")
        print("üìñ Documenta√ß√£o API: http://localhost:8000/docs")
        print("üõë Pressione Ctrl+C para parar")
        print("-" * 50)
        
        subprocess.run([sys.executable, 'api.py'], check=True)
    except KeyboardInterrupt:
        print("\nüëã Servidor parado pelo usu√°rio")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao iniciar servidor")
        return False
    return True

def main():
    """Fun√ß√£o principal"""
    print("üé¨ Conversor de Arquivos Multim√≠dia")
    print("=" * 40)
    
    # Verifica√ß√µes
    if not check_python_version():
        sys.exit(1)
    
    if not check_ffmpeg():
        sys.exit(1)
    
    check_virtual_environment()
    
    # Prepara√ß√£o
    create_directories()
    
    # Instalar depend√™ncias se necess√°rio
    try:
        import fastapi
        print("‚úÖ Depend√™ncias j√° instaladas")
    except ImportError:
        if not install_dependencies():
            sys.exit(1)
    
    # Iniciar servidor
    start_server()

if __name__ == "__main__":
    main()